package com.example.examplemod.Module.EXPLOIT;

import com.example.examplemod.ExampleMod;
import com.example.examplemod.Module.Module;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.monster.EntityMob;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.MathHelper;
import net.minecraft.util.math.RayTraceResult;
import net.minecraft.util.math.Vec3d;
import net.minecraftforge.client.event.RenderWorldLastEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import org.lwjgl.input.Keyboard;
import yea.bushroot.clickgui.Setting;

import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

public class MobAura extends Module {
    public MobAura() {
        super("MobAura(New)", Keyboard.KEY_NONE, Category.EXPLOIT);


        ExampleMod.instance.settingsManager.rSetting(new Setting("Rage", this, false));


        ExampleMod.instance.settingsManager.rSetting(new Setting("Range", this, 3.5, 1, 6, false));


        ExampleMod.instance.settingsManager.rSetting(new Setting("Walls", this, false));


        ExampleMod.instance.settingsManager.rSetting(new Setting("CriticalsMob", this, false));
    }

    @SubscribeEvent
    public void onUpdate(RenderWorldLastEvent e) {
        boolean rageMode = ExampleMod.instance.settingsManager.getSettingByName(this.name, "Rage").getValBoolean();
        double range = ExampleMod.instance.settingsManager.getSettingByName(this.name, "Range").getValDouble();
        boolean wallsMode = ExampleMod.instance.settingsManager.getSettingByName(this.name, "Walls").getValBoolean();
        boolean criticalsMob = ExampleMod.instance.settingsManager.getSettingByName(this.name, "CriticalsMob").getValBoolean();


        List<EntityLivingBase> targets = mc.world.loadedEntityList.stream()
                .filter(entity -> entity instanceof EntityMob)
                .map(entity -> (EntityLivingBase) entity)
                .filter(entity -> entity != mc.player)
                .filter(entity -> entity.getDistance(mc.player) <= range)
                .collect(Collectors.toList());


        EntityLivingBase target = targets.stream()
                .min(Comparator.comparing(entity -> entity.getDistance(mc.player)))
                .orElse(null);

        if (target != null) {

            if (!wallsMode && !canSeeEntity(target)) {
                return;
            }


            if (rageMode) {
                if (mc.player.getCooledAttackStrength(0) == 1) {
                    attackEntity(target, criticalsMob);
                }
            } else {

                mc.player.rotationYaw = rotations(target)[0];
                mc.player.rotationPitch = rotations(target)[1];


                if (mc.player.getCooledAttackStrength(0) == 1) {
                    attackEntity(target, criticalsMob);
                }
            }
        }
    }


    private void attackEntity(EntityLivingBase target, boolean criticalsMob) {
        if (criticalsMob && mc.player.onGround) {

            mc.player.connection.sendPacket(new CPacketPlayer.Position(
                    mc.player.posX,
                    mc.player.posY + 0.0625,
                    mc.player.posZ,
                    false));
            mc.player.connection.sendPacket(new CPacketPlayer.Position(
                    mc.player.posX,
                    mc.player.posY,
                    mc.player.posZ,
                    false));
        }


        mc.playerController.attackEntity(mc.player, target);
        mc.player.swingArm(EnumHand.MAIN_HAND);
        mc.player.resetCooldown();
    }


    public float[] rotations(EntityLivingBase entity) {
        double x = entity.posX - mc.player.posX;
        double y = entity.posY - (mc.player.posY + mc.player.getEyeHeight());
        double z = entity.posZ - mc.player.posZ;

        double u = MathHelper.sqrt(x * x + z * z);

        float yaw = (float) (MathHelper.atan2(z, x) * (180D / Math.PI) - 90.0F);
        float pitch = (float) (-MathHelper.atan2(y, u) * (180D / Math.PI));

        return new float[]{yaw, pitch};
    }


    private boolean canSeeEntity(EntityLivingBase entity) {
        Vec3d playerEyes = new Vec3d(mc.player.posX, mc.player.posY + mc.player.getEyeHeight(), mc.player.posZ);
        Vec3d entityPos = new Vec3d(entity.posX, entity.posY + entity.getEyeHeight(), entity.posZ);


        RayTraceResult result = mc.world.rayTraceBlocks(playerEyes, entityPos, false, true, false);
        return result == null || result.typeOfHit == RayTraceResult.Type.MISS;
    }
}